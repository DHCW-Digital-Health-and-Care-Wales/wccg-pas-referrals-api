name: build-ci.yml
on:
  workflow_dispatch:
#  push:
#    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: "ubuntu-latest"

    env:
      BUILD_CONFIGURATION: "Release"
      IMAGE_NAME: "pas/referrals.api"

    steps:
      - name: "Checkout branch"
        uses: actions/checkout@v4

#      - name: "Setup .NET Core v8 SDK"
#        uses: actions/setup-dotnet@v4
#        with:
#          dotnet-version: 8.0.x
#
#      - name: "DotNet Restore"
#        run: dotnet restore
#
#      - name: "DotNet Build"
#        run: dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}
#
#      - name: "Run Tests"
#        run: dotnet test --no-restore --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity normal --logger trx --collect "XPlat Code Coverage" --settings coverlet.runsettings
#
#      - name: "Coverage Report Generator"
#        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.4
#        with:
#          reports: "**/*.cobertura.xml"
#          targetdir: "${{ github.workspace }}"
#          reporttypes: "Cobertura"
#          verbosity: "Info"
#          title: "Code Coverage"
#          tag: "${{ github.run_number }}_${{ github.run_id }}" # Optional tag or build version.
#          toolpath: "reportgeneratortool"
#
#      - name: "Upload Combined Coverage XML"
#        uses: actions/upload-artifact@v4
#        with:
#          name: coverage
#          path: "${{ github.workspace }}/Cobertura.xml"
#          retention-days: 5
#
#      - name: "Publish Code Coverage Report"
#        uses: irongut/CodeCoverageSummary@v1.3.0
#        with:
#          filename: "Cobertura.xml"
#          badge: true
#          fail_below_min: true
#          format: markdown
#          hide_branch_rate: false
#          hide_complexity: true
#          indicators: true
#          output: both
#          thresholds: "60 80"
#
#      - name: "Add Coverage PR Comment"
#        uses: marocchino/sticky-pull-request-comment@v2
#        if: github.event_name == 'pull_request'
#        with:
#          recreate: true
#          path: code-coverage-results.md
#
#      - name: "Upload Test Result Files"
#        uses: actions/upload-artifact@v4
#        with:
#          name: test-results
#          path: ${{ github.workspace }}/**/TestResults/**/*
#          retention-days: 5
#
#      - name: "Publish Test Results"
#        uses: EnricoMi/publish-unit-test-result-action@v2.16.1
#        if: always()
#        with:
#          trx_files: "${{ github.workspace }}/**/*.trx"

#      - name: "Log in to Azure"
#        uses: azure/login@v1
#        with:
#          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Login to ACR"
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AZURE_DEV_ACR_REGISTRY_URL }}
          username: ${{ secrets.AZURE_DEV_ACR_CLIENT_ID }}
          password: ${{ secrets.AZURE_DEV_ACR_CLIENT_SECRET }}

      - name: "Build and Push to ACR"
        uses: docker/build-push-action@v6
        id: docker_build
        with:
          push: true
          context: "./src/WCCG.PAS.Referrals.API"
          file: "./src/WCCG.PAS.Referrals.API/Dockerfile"
          tags: |
            "${{ secrets.AZURE_DEV_ACR_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest"
            "${{ secrets.AZURE_DEV_ACR_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

      - name: Output image digest
        run: |
          echo "Image digest: ${{ steps.docker_build.outputs.digest }}"

#      - name: "Build docker image"
#        working-directory: "./src/WCCG.PAS.Referrals.API"
#        run: |
#          docker build -t pas/referrals.api:latest .
